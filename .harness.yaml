pipeline:
  name: AWS Infrastructure Pipeline
  identifier: aws-infrastructure-pipeline
  description: Deploy AWS EC2, RDS, and load balancer using Terraform
  projectIdentifier: my-project
  orgIdentifier: my-org
  stages:
    - stage:
        name: Deploy Infrastructure
        identifier: deploy-infrastructure
        type: Deployment
        spec:
          execution:
            steps:
              - step:
                  name: Terraform Plan
                  type: TerraformCloud
                  spec:
                    command: plan
                    workingDirectory: "./terraform"
                    terraformVersion: "latest"
                    inputs:
                      - key: terraform_backend
                        value: "s3"  # Use S3 as the backend
                      - key: terraform_variables
                        value:
                          - name: ami
                            value: "${ami}"
                          - name: instance_type
                            value: "${instance_type}"
                          - name: subnet_a_cidr
                            value: "${subnet_a_cidr}"
                          - name: subnet_b_cidr
                            value: "${subnet_b_cidr}"
                          - name: subnet_c_cidr
                            value: "${subnet_c_cidr}"
                          - name: db_name
                            value: "${db_name}"
                          - name: db_user
                            value: "${db_user}"
                          - name: db_pass
                            value: "${db_pass}"
                          - name: vpc_cidr
                            value: "${vpc_cidr}"
                          - name: bucket_prefix
                            value: "${bucket_prefix}"
                          
              - step:
                  name: Terraform Apply
                  type: TerraformCloud
                  spec:
                    command: apply
                    workingDirectory: "./terraform"
                    terraformVersion: "latest"
                    inputs:
                      - key: terraform_backend
                        value: "s3"
                      - key: terraform_variables
                        value:
                          - name: ami
                            value: "${ami}"
                          - name: instance_type
                            value: "${instance_type}"
                          - name: subnet_a_cidr
                            value: "${subnet_a_cidr}"
                          - name: subnet_b_cidr
                            value: "${subnet_b_cidr}"
                          - name: subnet_c_cidr
                            value: "${subnet_c_cidr}"
                          - name: db_name
                            value: "${db_name}"
                          - name: db_user
                            value: "${db_user}"
                          - name: db_pass
                            value: "${db_pass}"
                          - name: vpc_cidr
                            value: "${vpc_cidr}"
                          - name: bucket_prefix
                            value: "${bucket_prefix}"

    - stage:
        name: Validate Deployment
        identifier: validate-deployment
        type: Deployment
        spec:
          execution:
            steps:
              - step:
                  name: Terraform Output
                  type: TerraformCloud
                  spec:
                    command: output
                    workingDirectory: "./terraform"
                    terraformVersion: "latest"
                    inputs:
                      - key: terraform_variables
                        value:
                          - name: output_instance_1_ip
                            value: "${aws_instance.instance_1.public_ip}"
                          - name: output_instance_2_ip
                            value: "${aws_instance.instance_2.public_ip}"
                          - name: output_db_instance_ip
                            value: "${aws_db_instance.db_instance.address}"
                          - name: output_bucket_name
                            value: "${aws_s3_bucket.bucket.bucket}"

    - stage:
        name: Cleanup
        identifier: cleanup-infrastructure
        type: Deployment
        spec:
          execution:
            steps:
              - step:
                  name: Terraform Destroy
                  type: TerraformCloud
                  spec:
                    command: destroy
                    workingDirectory: "./terraform"
                    terraformVersion: "latest"
                    inputs:
                      - key: terraform_backend
                        value: "s3"
                      - key: terraform_variables
                        value:
                          - name: ami
                            value: "${ami}"
                          - name: instance_type
                            value: "${instance_type}"
                          - name: subnet_a_cidr
                            value: "${subnet_a_cidr}"
                          - name: subnet_b_cidr
                            value: "${subnet_b_cidr}"
                          - name: subnet_c_cidr
                            value: "${subnet_c_cidr}"
                          - name: db_name
                            value: "${db_name}"
                          - name: db_user
                            value: "${db_user}"
                          - name: db_pass
                            value: "${db_pass}"
                          - name: vpc_cidr
                            value: "${vpc_cidr}"
                          - name: bucket_prefix
                            value: "${bucket_prefix}"

  # Git Connector for the Pipeline
  git:
    connector:
      type: Git
      gitConfig:
        url: "https://github.com/your-repo/aws-infrastructure"  # Replace with actual Git repository URL
        branch: "main"  # You can change the branch if needed

variables:
  # EC2 Instance Variables
  ami: "ami-011899242bb902164"  # Replace with correct AMI ID
  instance_type: ["t2.micro", "t3.medium"]

  # Subnet Variables
  subnet_a_cidr: "10.0.1.0/24"
  subnet_b_cidr: "10.0.2.0/24"
  subnet_c_cidr: "10.0.3.0/24"

  # DB Variables
  db_name: "s3yomi"
  db_user: "admin"
  db_pass: "SecurePassword123!" 

  # VPC & S3 Variables
  vpc_cidr: "10.0.0.0/16"
  bucket_prefix: "s3yomi"
